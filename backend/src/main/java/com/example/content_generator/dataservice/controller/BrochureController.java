package com.example.content_generator.dataservice.controller;

import com.example.content_generator.dataservice.dto.BrochureDTO;
import com.example.content_generator.dataservice.model.Brochure;
import com.example.content_generator.dataservice.repository.BrochureRepository;
import com.example.content_generator.dataservice.service.BrochureService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

/**
 * <b>Controller for handling brochure-related operations.</b>
 */

/**
 * Service for handling product brochures.
 *
 * <p>This service provides methods to fetch brochures associated with multiple products and to upload new brochures.</p>
 *
 * <p>Endpoints:</p>
 * <ul>
 *     <li><b>Get Brochures for Multiple Products:</b> Use this endpoint to retrieve a list of brochure image URLs associated with multiple product IDs.
 *         <ul>
 *             <li><b>Endpoint:</b> {@code GET /api/v1/brochures/products}</li>
 *             <li><b>Query Parameter:</b> {@code productIds} - A list of product IDs for which brochures are requested. Example: {@code ?productIds=prod1&productIds=prod2&productIds=prod3}</li>
 *             <li><b>Response:</b> A map of product IDs to a list of {@link BrochureDTO} objects, each containing the product ID and URL of the brochure image. If no brochures are found for a product, that product ID will map to an empty list.</li>
 *         </ul>
 *     </li>
 *     <li><b>Upload a Brochure:</b> Use this endpoint to upload a new brochure and associate it with a product.
 *         <ul>
 *             <li><b>Endpoint:</b> {@code POST /api/v1/brochures/upload}</li>
 *             <li><b>Request Parameters:</b>
 *                 <ul>
 *                     <li>{@code productId} - The ID of the product to associate with the uploaded file.</li>
 *                     <li>{@code file} - The multipart file to upload. This should be the brochure image.</li>
 *                 </ul>
 *             </li>
 *             <li><b>Response:</b> A {@link BrochureDTO} object representing the newly uploaded brochure, including the product ID and URL of the uploaded file. If an error occurs, an HTTP 500 status with a null body is returned.</li>
 *         </ul>
 *     </li>
 * </ul>
 */

@RestController
@RequestMapping("/api/v1/brochures")
public class BrochureController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BrochureController.class);

    private final BrochureService brochureService;

    private final BrochureRepository brochureRepository; // MongoDB repository

    public BrochureController(BrochureService brochureService, BrochureRepository brochureRepository) {
        this.brochureService = brochureService;
        this.brochureRepository = brochureRepository;
    }

    /**
     * Handles file upload and associates the uploaded file with a product.
     *
     * <p>Note:</p>
     * <ul>
     *     <li>The uploaded file is saved, and its URL is associated with the specified product ID.</li>
     *     <li>The file URL is generated by the {@link BrochureService#uploadFile(MultipartFile)} method.</li>
     *     <li>The {@link Brochure} entity is created with the provided product ID and the generated file URL.</li>
     *     <li>The created brochure is saved to the database and returned in the response.</li>
     * </ul>
     *
     * @param productId The ID of the product to associate with the uploaded file.
     * @param file The file to upload. Must be a multipart file.
     * @return A {@link ResponseEntity} containing a {@link BrochureDTO} with the product ID and file URL if successful,
     *         or an HTTP 500 status with a null body if an error occurs.
     */

    @PostMapping("/upload")
    public ResponseEntity<BrochureDTO> uploadFile(@RequestParam("productId") String productId,
                                                  @RequestParam("file") MultipartFile file) {
        try {
            // Upload the file and obtain its URL
            String fileUrl = brochureService.uploadFile(file);

            // Create a new brochure entity
            Brochure brochure = new Brochure();
            brochure.setProductId(productId);
            brochure.setUrl(fileUrl);

            // Save the brochure to the repository
            Brochure savedBrochure = brochureRepository.save(brochure);

            // Create a DTO to return
            BrochureDTO brochureDTO = new BrochureDTO();
            brochureDTO.setProductId(savedBrochure.getProductId());
            brochureDTO.setUrl(savedBrochure.getUrl());

            // Return the DTO in the response
            return ResponseEntity.ok(brochureDTO);
        } catch (IOException e) {
            LOGGER.error(e.getMessage());
            // Handle the error and return an HTTP 500 status
            return ResponseEntity.status(500).body(null);
        }
    }

    /**
     * Retrieves a list of brochures associated with a specific product ID.
     *
     * <p>Note:</p>
     * <ul>
     *     <li>The product ID provided in the URL path is used to find all related brochures.</li>
     *     <li>Each brochure is represented as a {@link BrochureDTO} containing the product ID and URL.</li>
     *     <li>If no brochures are found for the given product ID, an empty list will be returned.</li>
     * </ul>
     *
     * @param productId The ID of the product for which brochures are requested.
     * @return A {@link ResponseEntity} containing a list of {@link BrochureDTO} objects representing brochures
     *         associated with the given product ID. If successful, the list is included in the response body.
     *         If no brochures are found, an empty list is returned.
     */

    @GetMapping("/products/{productId}")
    public ResponseEntity<List<BrochureDTO>> getBrochuresByProductId(@PathVariable String productId) {
        // Fetch brochures by the product ID
        List<Brochure> brochures = brochureRepository.findByProductId(productId);

        // Convert brochures to DTOs
        List<BrochureDTO> brochureDTOs = brochures.stream()
                .map(b -> new BrochureDTO(b.getProductId(), b.getUrl()))
                .collect(Collectors.toList());

        // Return the list of DTOs in the response
        return ResponseEntity.ok(brochureDTOs);
    }

    /**
     * Gets brochures based on a list of product IDs.
     *
     * <p>Note:</p>
     * <ul>
     *     <li>The request should include a list of product IDs in the query parameters.</li>
     *     <li>Each product ID in the list will be used to fetch the associated brochures.</li>
     * </ul>
     *
     * @param productIds A list of product IDs for which brochures are requested.
     * @return A list of {@link BrochureDTO} objects representing brochures associated with the given product IDs.
     */

    @GetMapping("/products")
    public ResponseEntity<List<BrochureDTO>> getBrochuresByProductIds(@RequestParam List<String> productIds) {
        // Fetch brochures by product IDs
        List<Brochure> brochures = brochureRepository.findByProductIds(productIds);

        // Convert to DTOs
        List<BrochureDTO> brochureDTOs = brochures.stream()
                .map(b -> new BrochureDTO(b.getProductId(), b.getUrl()))
                .collect(Collectors.toList());

        return ResponseEntity.ok(brochureDTOs);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBrochure(@PathVariable String id) {
        Brochure brochure = brochureRepository.findById(id).orElse(null);
        if (brochure != null) {
            brochureService.deleteFile(brochure.getUrl()); // Delete file from Azure Blob Storage
            brochureRepository.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping("/{id}")
    public ResponseEntity<BrochureDTO> updateBrochure(@PathVariable String id,
                                                      @RequestParam("file") MultipartFile file) {
        try {
            Brochure existingBrochure = brochureRepository.findById(id).orElse(null);
            if (existingBrochure != null) {
                brochureService.deleteFile(existingBrochure.getUrl()); // Delete old file

                String newFileUrl = brochureService.uploadFile(file);
                existingBrochure.setUrl(newFileUrl);

                Brochure updatedBrochure = brochureRepository.save(existingBrochure);
                BrochureDTO brochureDTO = new BrochureDTO();
                brochureDTO.setProductId(updatedBrochure.getProductId());
                brochureDTO.setUrl(updatedBrochure.getUrl());

                return ResponseEntity.ok(brochureDTO);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }
}
