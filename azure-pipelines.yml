trigger:
  branches:
    include:
      - main
      - feature/ci

pool:
  vmImage: 'ubuntu-latest'

variables:
  backendArtifact: 'backend.war'
  middlewareArtifact: 'middleware.war'
  frontendBuildDirectory: 'frontend/build'
  azureSubscription: 'Labs'
  resourceGroup: 'aistudy'
  acrName: 'aistudy1.azurecr.io'
  backendAppName: 'aistudy-backend'
  middlewareAppName: 'aistudy-middleware'
  frontendAppName: 'aistudy-frontend'
  appType: 'webAppLinux'  # Setting appType property for Azure Web App

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
    - job: Build_Backend
      displayName: 'Build Backend Service'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
      - task: Maven@4
        inputs:
          mavenPomFile: 'backend/pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'   # JDK Version set to 17
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          goals: 'clean package'
      - publish: '$(System.DefaultWorkingDirectory)/backend/target/$(backendArtifact)'
        artifact: backend

    - job: Build_Middleware
      displayName: 'Build Middleware Service'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
      - task: Maven@4
        inputs:
          mavenPomFile: 'middleware/pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'   # JDK Version set to 17
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          goals: 'clean package'
      - publish: '$(System.DefaultWorkingDirectory)/middleware/target/$(middlewareArtifact)'
        artifact: middleware

    - job: Build_Frontend
      displayName: 'Build Frontend Service'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
      - script: |
          cd frontend
          npm install
          npm run build
      - publish: '$(System.DefaultWorkingDirectory)/$(frontendBuildDirectory)'
        artifact: frontend

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  jobs:
    - job: Deploy_Backend_AppService
      displayName: 'Deploy Backend to Azure App Service'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - download: current
        artifact: backend
      - task: AzureWebApp@1
        inputs:
          azureSubscription: '$(azureSubscription)'
          appName: '$(backendAppName)'
          package: '$(Pipeline.Workspace)/backend/$(backendArtifact)'
          appType: 'webAppLinux'  # Specify appType for Web App on Linux

    - job: Deploy_Middleware_AppService
      displayName: 'Deploy Middleware to Azure App Service'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - download: current
        artifact: middleware
      - task: AzureWebApp@1
        inputs:
          azureSubscription: '$(azureSubscription)'
          appName: '$(middlewareAppName)'
          package: '$(Pipeline.Workspace)/middleware/$(middlewareArtifact)'
          appType: 'webAppLinux'  # Specify appType for Web App on Linux

    - job: Deploy_Frontend_AppService
      displayName: 'Deploy Frontend to Azure App Service'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - download: current
        artifact: frontend
      - task: AzureWebApp@1
        inputs:
          azureSubscription: '$(azureSubscription)'
          appName: '$(frontendAppName)'
          package: '$(Pipeline.Workspace)/frontend/**'
          startUpCommand: 'pm2 serve /home/site/wwwroot/build --no-daemon --spa'
          appType: 'webAppLinux'  # Specify appType for Web App on Linux

    # - job: Deploy_Backend_AKS
    #   displayName: 'Deploy Backend to Azure Kubernetes Service'
    #   pool:
    #     vmImage: 'ubuntu-latest'
    #   steps:
    #   - download: current
    #     artifact: backend
    #   - script: |
    #       az aks get-credentials --resource-group $(resourceGroup) --name <ClusterName>
    #       docker build -t $(acrName)/backend:latest backend/
    #       docker push $(acrName)/backend:latest
    #       kubectl apply -f backend/backend-deployment.yml

    # - job: Deploy_Middleware_AKS
    #   displayName: 'Deploy Middleware to Azure Kubernetes Service'
    #   pool:
    #     vmImage: 'ubuntu-latest'
    #   steps:
    #   - download: current
    #     artifact: middleware
    #   - script: |
    #       az aks get-credentials --resource-group $(resourceGroup) --name <ClusterName>
    #       docker build -t $(acrName)/middleware:latest middleware/
    #       docker push $(acrName)/middleware:latest
    #       kubectl apply -f middleware/middleware-deployment.yml

    # - job: Deploy_Frontend_AKS
    #   displayName: 'Deploy Frontend to Azure Kubernetes Service'
    #   pool:
    #     vmImage: 'ubuntu-latest'
    #   steps:
    #   - download: current
    #     artifact: frontend
    #   - script: |
    #       az aks get-credentials --resource-group $(resourceGroup) --name <ClusterName>
    #       docker build -t $(acrName)/frontend:latest frontend/
    #       docker push $(acrName)/frontend:latest
    #       kubectl apply -f frontend/frontend-deployment.yml
