trigger:
  branches:
    include:
      - feature/ci

parameters:
  - name: deploymentTarget
    displayName: 'Select Deployment Target'
    type: string
    default: 'AppService'
    values:
      - AppService
      - AKS

variables:
  - group: ai-study-vg
  - group: ai-study-secrets


jobs:
  # Build Jobs
  - job: Build_Backend
    displayName: Build Backend Service
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Maven@4
        inputs:
          mavenPomFile: 'backend/pom.xml'
          goals: 'clean package'
      # Publish the artifact
      - publish: 'backend/target/backend.war'
        artifact: backend_artifact

  - job: Build_Middleware
    displayName: Build Middleware Service
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Maven@4
        inputs:
          mavenPomFile: 'middleware/pom.xml'
          goals: 'clean package'
      # Publish the artifact
      - publish: 'middleware/target/middleware.war'
        artifact: middleware_artifact

  - job: Build_Frontend
    displayName: Build Frontend Application
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          npm install
          npm run build
        workingDirectory: frontend
      # Publish the artifact
      - publish: 'frontend/build'
        artifact: frontend_artifact

  # Conditional Deployment Jobs for App Service
  - deployment: Deploy_Backend_AppService
    displayName: Deploy Backend to Azure App Service
    dependsOn: Build_Backend
    condition: eq('${{ parameters.deploymentTarget }}', 'AppService')
    environment: 'prod'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              inputs:
                azureSubscription: '$(AzureSubscription)' # This will be set from Variable Group
                appName: '$(BackendAppServiceName)' # This will be set from Key Vault - Variable Group
                package: '$(Pipeline.Workspace)/backend_artifact/backend.war'
                appType: 'webAppLinux'
                appSettings: |
                  -AZURE_KEYVAULT_URI "$(AZURE_KEYVAULT_URI)"

  - deployment: Deploy_Middleware_AppService
    displayName: Deploy Middleware to Azure App Service
    dependsOn: Build_Middleware
    condition: eq('${{ parameters.deploymentTarget }}', 'AppService')
    environment: 'prod'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              inputs:
                azureSubscription: '$(AzureSubscription)' # This will be set from Variable Group
                appName: '$(BackendAppServiceName)' # This will be set from Key Vault - Variable Group
                package: '$(Pipeline.Workspace)/middleware_artifact/middleware.war'
                appType: 'webAppLinux'
                appSettings: |
                  -AZURE_KEYVAULT_URI "$(AZURE_KEYVAULT_URI)"

  - deployment: Deploy_Frontend_AppService
    displayName: Deploy Frontend to Azure App Service
    dependsOn: Build_Frontend
    condition: eq('${{ parameters.deploymentTarget }}', 'AppService')
    environment: 'prod'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              inputs:
                azureSubscription: '$(AzureSubscription)' # This will be set from Variable Group
                appType: 'webAppLinux'
                appName: '$(FrontendAppServiceName)' # This will be set from Key Vault - Variable Group
                package: '$(Pipeline.Workspace)/frontend_artifact/build'
                startUpCommand: 'pm2 serve /home/site/wwwroot/build --no-daemon --spa'
                appSettings: |
                  -AZURE_KEYVAULT_URI "$(AZURE_KEYVAULT_URI)" -REACT_APP_SERVICE_BASE_URL "$(MiddlewareServiceBaseUrl)" -REACT_APP_CLIENT_ID "$(MsalAppId)" -REACT_APP_CONTENT_GENERATOR_ENDPOINT "$(MiddlewareServiceGenerateContentEndpoint)" -REACT_APP_SERVICE_ACCESS_KEY "$(MiddlewareServiceAccessKey)"

  # Conditional Deployment Jobs for AKS
  - deployment: Deploy_Backend_AKS
    displayName: Deploy Backend to AKS
    dependsOn: Build_Backend
    condition: eq('${{ parameters.deploymentTarget }}', 'AKS')
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'aks-backend-namespace'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: KubernetesManifest@1
              displayName: Deploy Backend to Kubernetes
              inputs:
                action: 'deploy'
                connectionType: 'azureResourceManager'
                azureSubscriptionConnection: 'Labs'
                azureResourceGroup: 'aistudy'
                kubernetesCluster: 'aistudy'
                namespace: 'backend-namespace'
                manifests: 'backend/backend-deployment.yml'

  - deployment: Deploy_Middleware_AKS
    displayName: Deploy Middleware to AKS
    dependsOn: Build_Middleware
    condition: eq('${{ parameters.deploymentTarget }}', 'AKS')
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'aks-middleware-namespace'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: KubernetesManifest@1
              displayName: Deploy Middleware to Kubernetes
              inputs:
                action: 'deploy'
                connectionType: 'azureResourceManager'
                azureSubscriptionConnection: 'Labs'
                azureResourceGroup: 'aistudy'
                kubernetesCluster: 'aistudy'
                namespace: 'middleware-namespace'
                manifests: 'middleware/middleware-deployment.yml'

  - deployment: Deploy_Frontend_AKS
    displayName: Deploy Frontend to AKS
    dependsOn: Build_Frontend
    condition: eq('${{ parameters.deploymentTarget }}', 'AKS')
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'aks-frontend-namespace'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
            - task: KubernetesManifest@1
              displayName: Deploy Frontend to Kubernetes
              inputs:
                action: 'deploy'
                connectionType: 'azureResourceManager'
                azureSubscriptionConnection: 'Labs'
                azureResourceGroup: 'aistudy'
                kubernetesCluster: 'aistudy'
                namespace: 'frontend-namespace'
                manifests: 'frontend/frontend-deployment.yml'
