trigger:
  branches:
    include:
      - main
      - feature/ci

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Define common variables
  backendAppName: 'aistudy-backend'
  middlewareAppName: 'aistudy-middleware'
  frontendAppName: 'aistudy-frontend'
  backendDockerImage: 'aistudy1.azurecr.io/aistudy/backend-service:$(Build.BuildId)'
  middlewareDockerImage: 'aistudy1.azurecr.io/aistudy/middleware-service:$(Build.BuildId)'
  frontendDockerImage: 'aistudy1.azurecr.io/aistudy/frontend:$(Build.BuildId)'
  containerRegistry: 'aistudy1.azurecr.io'

stages:
  - stage: InstallJDK
    displayName: 'Install Microsoft OpenJDK'
    jobs:
      - job: InstallJDKJob
        displayName: 'Install Microsoft OpenJDK 17.0.12'
        steps:
          - script: |
              echo "Installing Microsoft OpenJDK 17.0.12..."
              wget https://aka.ms/download-jdk/microsoft-jdk-17.0.12-linux-x64.tar.gz -O microsoft-jdk-17.tar.gz
              sudo mkdir -p /usr/lib/jvm/microsoft-jdk-17
              sudo tar -xzf microsoft-jdk-17.tar.gz -C /usr/lib/jvm/microsoft-jdk-17 --strip-components=1
              echo "Installed Microsoft OpenJDK 17.0.12 at /usr/lib/jvm/microsoft-jdk-17"
            displayName: 'Download and Install Microsoft OpenJDK'

          - script: |
              echo "Configuring JDK environment variables..."
              echo "JAVA_HOME=/usr/lib/jvm/microsoft-jdk-17" | sudo tee -a /etc/environment
              echo "PATH=/usr/lib/jvm/microsoft-jdk-17/bin:$PATH" | sudo tee -a /etc/environment
              source /etc/environment
              java -version
              javac -version
            displayName: 'Set JAVA_HOME and PATH'

          # Publish the JAVA_HOME environment variable for subsequent jobs
          - powershell: |
              Write-Output "##vso[task.setvariable variable=JAVA_HOME;isOutput=true]/usr/lib/jvm/microsoft-jdk-17"
            name: SetJavaHome
            displayName: 'Set Output Variable for JAVA_HOME'

  - stage: Build
    displayName: 'Build Stage'
    dependsOn: InstallJDK
    jobs:
      - job: BuildBackend
        displayName: 'Build Backend'
        steps:
          # Use the JAVA_HOME variable set by the InstallJDK stage
          - script: |
              cd backend
              ./mvnw clean package
            displayName: 'Build Java Backend'
            env:
              JAVA_HOME: $(SetJavaHome.JAVA_HOME)
              PATH: $(SetJavaHome.JAVA_HOME)/bin:$(PATH)

      - job: BuildMiddleware
        displayName: 'Build Middleware'
        steps:
          # Use the JAVA_HOME variable set by the InstallJDK stage
          - script: |
              cd middleware
              ./mvnw clean package
            displayName: 'Build Java Middleware'
            env:
              JAVA_HOME: $(SetJavaHome.JAVA_HOME)
              PATH: $(SetJavaHome.JAVA_HOME)/bin:$(PATH)

      - job: BuildFrontend
        displayName: 'Build Frontend'
        steps:
          - script: |
              cd frontend
              npm install
              npm run build
            displayName: 'Build React Frontend'

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: Build
    jobs:
      - deployment: DeployBackend
        displayName: 'Deploy Backend'
        environment: 'backend-env'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Docker@2
                  inputs:
                    containerRegistry: 'Labs Container'
                    repository: '$(backendDockerImage)'
                    command: 'buildAndPush'
                    Dockerfile: 'backend/Dockerfile'
                    tags: '$(Build.BuildId)'
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'Labs'
                    appType: 'webAppLinux'
                    appName: $(backendAppName)
                    package: '$(System.DefaultWorkingDirectory)/backend/target/*.war'

      - deployment: DeployMiddleware
        displayName: 'Deploy Middleware'
        environment: 'middleware-env'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Docker@2
                  inputs:
                    command: 'buildAndPush'
                    repository: $(middlewareDockerImage)
                    Dockerfile: 'middleware/Dockerfile'
                    containerRegistry: 'Labs Container'
                    tags: |
                      $(Build.BuildId)
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'Labs'
                    appType: 'webAppLinux'
                    appName: $(middlewareAppName)
                    package: '$(System.DefaultWorkingDirectory)/middleware/target/*.war'

      - deployment: DeployFrontend
        displayName: 'Deploy Frontend'
        environment: 'frontend-env'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Docker@2
                  inputs:
                    command: 'buildAndPush'
                    repository: $(frontendDockerImage)
                    Dockerfile: 'frontend/Dockerfile'
                    containerRegistry: 'Labs Container'
                    tags: |
                      $(Build.BuildId)
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: 'Labs'
                    appType: 'webAppLinux'
                    appName: $(frontendAppName)
                    package: '$(System.DefaultWorkingDirectory)/frontend/build'
                    startUpCommand: 'pm2 serve /home/site/wwwroot/build --no-daemon --spa'
